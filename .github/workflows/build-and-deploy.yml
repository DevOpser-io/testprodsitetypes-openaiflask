name: Build and Deploy

on:
  push:
    branches: [ "main", "staging" ]
  pull_request:
    branches: [ "main", "staging" ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    # Only run if not a Dependabot PR
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r app/requirements.txt

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Remove conflicting packages and Install Docker
      run: |
        sudo apt-get remove -y containerd.io moby-runc runc
        sudo apt-get update
        sudo apt-get install -y docker.io

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
      with:
        registries: ${{ secrets.REGISTRIES }}

    - name: Generate Cache Version
      id: cache-version
      run: echo "version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Log Cache Version
      run: |
        echo "Using CACHE_VERSION:"
        echo "${{ steps.cache-version.outputs.version }}"

    - name: Set IMAGE_TAG
      id: image_tag
      shell: bash
      run: |
        # Determine the branch name based on the event type
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # For pull requests, use the base branch (target branch)
          BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
        else
          # For pushes, use the ref name
          BRANCH_NAME="${{ github.ref_name }}"
        fi

        echo "BRANCH_NAME is: $BRANCH_NAME"

        # Ensure BRANCH_NAME is either 'main' or 'staging'
        if [ "$BRANCH_NAME" != "main" ] && [ "$BRANCH_NAME" != "staging" ]; then
          echo "Error: BRANCH_NAME must be 'main' or 'staging'. Got '$BRANCH_NAME'"
          exit 1
        fi

        # Construct the IMAGE_TAG
        IMAGE_TAG="${{ github.sha }}-$BRANCH_NAME"

        echo "IMAGE_TAG is: $IMAGE_TAG"

        # Set the output variable
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        IMAGE_TAG: ${{ steps.image_tag.outputs.image_tag }}
        OPENAI_SECRET_NAME: ${{ secrets.OPENAI_SECRET_NAME }}
        FLASK_SECRET_NAME: ${{ secrets.FLASK_SECRET_NAME }}
        REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "Using IMAGE_TAG: $IMAGE_TAG"
        docker build --build-arg OPENAI_SECRET_NAME=${OPENAI_SECRET_NAME} --build-arg FLASK_SECRET_NAME=${FLASK_SECRET_NAME} --build-arg CACHE_VERSION=${{ steps.cache-version.outputs.version }} --build-arg REGION=${{secrets.AWS_REGION}} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG