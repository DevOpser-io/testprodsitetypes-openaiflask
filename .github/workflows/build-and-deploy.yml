name: Build and Deploy

on:
  repository_dispatch:
    types: [trigger-build]
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install -r app/requirements.txt

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Remove conflicting packages and Install Docker
      run: |
        sudo apt-get remove -y containerd.io moby-runc runc
        sudo apt-get update
        sudo apt-get install -y docker.io

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
      with:
        registries: ${{ secrets.REGISTRIES }}

    - name: Generate Cache Version
      id: cache-version
      run: echo "version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Log Cache Version
      run: |
        echo "Using CACHE_VERSION:"
        echo "${{ steps.cache-version.outputs.version }}"

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPO_NAME }} 
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg OPENAI_SECRET_NAME=${{ secrets.OPENAI_SECRET_NAME }} --build-arg FLASK_SECRET_NAME=${{ secrets.FLASK_SECRET_NAME }} --build-arg CACHE_VERSION=${{ steps.cache-version.outputs.version }} --build-arg REGION=${{secrets.AWS_REGION}} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Update Terraform Cloud Variable in destination workspace - Production
      if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        curl \
          --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request PATCH \
          --data '{
            "data": {
              "id": "${{ secrets.CONTAINER_LABEL_AIDEMO_VARIABLE_ID }}",
              "type": "vars",
              "attributes": {
                "value": "${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}"
              }
            }
          }' \
        https://app.terraform.io/api/v2/workspaces/${{ secrets.CONTAINER_LABEL_AIDEMO_WORKSPACE_ID }}/vars/${{ secrets.CONTAINER_LABEL_AIDEMO_VARIABLE_ID }}

    - name: Update Terraform Cloud Variable in destination workspace - Staging
      if: github.event_name == 'pull_request' && github.base_ref == 'staging' || github.event_name == 'push' && github.ref == 'refs/heads/staging'
      run: |
        curl \
          --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request PATCH \
          --data '{
            "data": {
              "id": "${{ secrets.CONTAINER_LABEL_AIDEMO_VARIABLE_ID }}",
              "type": "vars",
              "attributes": {
                "value": "${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}"
              }
            }
          }' \
        https://app.terraform.io/api/v2/workspaces/${{ secrets.CONTAINER_LABEL_AIDEMO_WORKSPACE_ID_STAGING }}/vars/${{ secrets.CONTAINER_LABEL_AIDEMO_VARIABLE_ID }}

    - name: Update Source workspace Terraform Cloud Variable
      if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'staging') || github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
      run: |
        curl \
          --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request PATCH \
          --data '{
            "data": {
              "id": "${{ secrets.source_workspace_flaskai_variable_id }}",
              "type": "vars",
              "attributes": {
                "value": "${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}"
              }
            }
          }' \
        https://app.terraform.io/api/v2/workspaces/${{ secrets.source_workspace_id_flaskai }}/vars/${{ secrets.source_workspace_flaskai_variable_id }}

    - name: Trigger Terraform Cloud Run - Production
      if: github.event_name == 'pull_request' && github.base_ref == 'main' || github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        curl \
          --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request POST \
          --data '{
            "data": {
              "attributes": {
                "is-destroy":false,
                "message":"Triggered from GitHub Actions"
              },
              "type":"runs",
              "relationships": {
                "workspace": {
                  "data": {
                    "type":"workspaces",
                    "id":"${{ secrets.container_label_aidemo_workspace_id}}"
                  }
                }
              }
            }
          }' \
          https://app.terraform.io/api/v2/runs

    - name: Trigger Terraform Cloud Run - Staging
      if: github.event_name == 'pull_request' && github.base_ref == 'staging' || github.event_name == 'push' && github.ref == 'refs/heads/staging'
      run: |
        curl \
          --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request POST \
          --data '{
            "data": {
              "attributes": {
                "is-destroy":false,
                "message":"Triggered from GitHub Actions"
              },
              "type":"runs",
              "relationships": {
                "workspace": {
                  "data": {
                    "type":"workspaces",
                    "id":"${{ secrets.CONTAINER_LABEL_AIDEMO_WORKSPACE_ID_STAGING }}"
                  }
                }
              }
            }
          }' \
          https://app.terraform.io/api/v2/runs


